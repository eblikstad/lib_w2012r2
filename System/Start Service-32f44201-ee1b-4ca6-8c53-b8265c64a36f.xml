<joblist>
  <job>
    <context>
      <options preserveOrder='true'>
        <option delimiter=';' multivalued='true' name='Condition' valuesUrl='file:/json/wmi.json'>
          <description>WMI conditions for the script.</description>
        </option>
        <option name='Name' required='true'>
          <description>Service name (single service).</description>
        </option>
        <option name='Timeout' required='true' value='300'>
          <description>Timeout in seconds before a pending stopping service process is killed.</description>
        </option>
      </options>
    </context>
    <description>Start a Windows service.</description>
    <dispatch>
      <excludePrecedence>true</excludePrecedence>
      <keepgoing>true</keepgoing>
      <rankOrder>ascending</rankOrder>
      <successOnEmptyNodeFilter>false</successOnEmptyNodeFilter>
      <threadcount>32</threadcount>
    </dispatch>
    <executionEnabled>true</executionEnabled>
    <group>System</group>
    <id>32f44201-ee1b-4ca6-8c53-b8265c64a36f</id>
    <loglevel>INFO</loglevel>
    <name>Start Service</name>
    <nodeFilterEditable>false</nodeFilterEditable>
    <nodefilters>
      <filter>nonodes</filter>
    </nodefilters>
    <nodesSelectedByDefault>false</nodesSelectedByDefault>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <description>PS Script</description>
        <fileExtension>ps1</fileExtension>
        <script><![CDATA[#requires -version 3
<#
.SYNOPSIS
  Rundeck inline PowerShell script.
.DESCRIPTION
  Inline scripts are used for simple procedures, typical 25-100 lines in length.
  Job options are accessible in the script using named tokens, ie. @option.Parameter1@. Warning, tokens are case sensitive.
  Remember to use quotes if needed, they are howeer required if the option is optional (empty options removes token).
  The token syntax can be escaped using the backslash character and therefore you need to take care building file system paths.
  Example: Get-Job -Name "@option.Parameter1@"
  
  Default error action is stop, and the error code is returned to Rundeck.
  You may return custom error codes with the Exit command and an error code.
  Example: Exit 13
.NOTES
  18.01.2017 EXTEBL: Added return code handling.
  18.01.2017 EXTEBL: Added PowerShell profile script.
  18.01.2017 EXTEBL: Reverted to -command line switch due to a bug.
#>
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"
$host.UI.RawUI.BufferSize = new-object System.Management.Automation.Host.Size(150,50)

# Check WMI queries for script conditions
"@option.Condition@".Split(";") | ?{$_.Trim() -ne  ""} | %{ if(-not(gwmi -query $_)) {exit}}

Write-Output '"Starting the service @option.Name@".'

$service = Get-Service "@option.Name@"

If($service.Status -eq "Running") {
    Write-Warning "Service is already running."
    }

If($service.Status -ne "Stopped") {
    Throw "Service is a unknown state."
    }

$service.Start()
$sw = [System.Diagnostics.Stopwatch]::StartNew()
While($(Get-Service "@option.Name@").Status -ne "Running"){
    Sleep 1
    If($sw.Elapsed.TotalSeconds -gt "@option.Timeout@"){break}
}

$service = Get-Service "@option.Name@"

If($service.Status -ne "Running") {
    Throw "Timeout, service not running."
    }

]]></script>
        <scriptargs />
        <scriptinterpreter>powershell.exe -inputformat none -noninteractive -nologo -command</scriptinterpreter>
      </command>
    </sequence>
    <timeout>24h</timeout>
    <uuid>32f44201-ee1b-4ca6-8c53-b8265c64a36f</uuid>
  </job>
</joblist>
