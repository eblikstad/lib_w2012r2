<joblist>
  <job>
    <context>
      <options preserveOrder='true'>
        <option name='Hostname' required='true' value='w2016-default' />
        <option name='Name' value='w2016-default' />
        <option name='Operatingsystem' required='true' value='Windows Server 2016 Standard' />
        <option name='Password.Storage.Path' required='true' value='keys/vmsadmin' />
        <option name='Project' required='true' />
        <option name='Username' value='vmsadmin' />
        <option name='Manufacturer' />
        <option name='Model' />
        <option name='Unmanaged' required='true' value='false' />
      </options>
    </context>
    <description></description>
    <executionEnabled>true</executionEnabled>
    <group>Rundeck</group>
    <id>5fa01dda-3271-44f9-bb9c-68b3de7e09e7</id>
    <loglevel>INFO</loglevel>
    <name>Update Node</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <description>PowerShell Inline Script</description>
        <fileExtension>ps1</fileExtension>
        <script><![CDATA[#requires -version 2
<#
.SYNOPSIS
  Returns the PowerShell engine version using the VMS log format
.DESCRIPTION
  The $PSVersionTable built-in variable is the most reliable method of determining the PowerShell version.
  Uses the Write-VLog function to return the PowerShell version in the VMS log format.
  The PowerShell major version is returned in the Data column and a comment in the Message column.
.PARAMETER <Parameter_Name>
    <Brief description of parameter input required. Repeat this attribute if required>
.INPUTS
  None
.OUTPUTS
  <Outputs if any, otherwise state None - example: Log file stored in C:\Windows\Temp\<name>.log>
.NOTES
  Version:        1.0
  Author:         Espen Blikstad
  Creation Date:  05.02.2016
  Purpose/Change: Initial script development
#>

$hostname = "@option.Hostname@".ToLower()
$name = "@option.Name@".ToLower()
$operatingsystem = "@option.Operatingsystem@"
$userName = "@option.Username@"
$passwordStoragePath = "@option.Password.Storage.Path@"
$project = "@option.Project@"
$Manufacturer = "@option.Manufacturer@"
$Model = "@option.Model@"

$unmanaged = ""
if("@option.Unmanaged@" -like "true"){
    $unmanaged = "unmanaged\"
}
$encoding = [System.Text.Encoding]::UTF8
$file = $($(Get-Location).Path + "\projects\$project\resources\$unmanaged$name.xml")
Write-Output "Debug: $file"
$xmlOut = $file

# Create The Document
$XmlWriter = New-Object System.XMl.XmlTextWriter($xmlOut,$encoding)
# Set The Formatting
$xmlWriter.Formatting = "Indented"
$xmlWriter.Indentation = "4"
# Write the XML Decleration
$xmlWriter.WriteStartDocument()

$xmlWriter.WriteStartElement("project")


   $xmlWriter.WriteStartElement("node")
   $XmlWriter.WriteAttributeString("name",$name)

   $XmlWriter.WriteAttributeString("hostname",$hostname)
   $XmlWriter.WriteAttributeString("osFamily","windows")
   $XmlWriter.WriteAttributeString("osName",$operatingsystem)
   $XmlWriter.WriteAttributeString("username",$userName)
   $XmlWriter.WriteAttributeString("smb-user",$userName)
   $XmlWriter.WriteAttributeString("smb-password-storage-path",$passwordStoragePath)
   $XmlWriter.WriteAttributeString("winrm-password-storage-path",$passwordStoragePath)
   $XmlWriter.WriteAttributeString("connectionType","WINRM_NATIVE")
   $XmlWriter.WriteAttributeString("winrm-auth-type","basic")

      if($Model -and $Manufacturer){
      $xmlWriter.WriteStartElement("attribute")
      $XmlWriter.WriteAttributeString("name","ComputerSystem:Manufacturer")
      $XmlWriter.WriteAttributeString("value",$Manufacturer)
      $xmlWriter.WriteEndElement()
      $xmlWriter.WriteStartElement("attribute")
      $XmlWriter.WriteAttributeString("name","ComputerSystem:Model")
      $XmlWriter.WriteAttributeString("value",$Model)
      $xmlWriter.WriteEndElement()
      }

   $xmlWriter.WriteEndElement()


$xmlWriter.WriteEndElement()
$xmlWriter.WriteEndDocument() 
# Finish The Document
$xmlWriter.Finalize
$xmlWriter.Flush()
$xmlWriter.Close()
]]></script>
        <scriptargs />
        <scriptinterpreter>powershell.exe -inputformat none -noninteractive -command</scriptinterpreter>
      </command>
    </sequence>
    <uuid>5fa01dda-3271-44f9-bb9c-68b3de7e09e7</uuid>
  </job>
</joblist>
