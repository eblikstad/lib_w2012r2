<joblist>
  <job>
    <context>
      <options preserveOrder='true'>
        <option delimiter=';' multivalued='true' name='Condition' valuesUrl='file:/json/wmi.json'>
          <description>Specifies the conditions for the job.</description>
        </option>
        <option name='Name' required='true'>
          <description>Specifies the exact names of the module to install or update from the repository.</description>
        </option>
        <option name='Repository' required='true' value='PSGallery'>
          <description>Specifies the friendly name of a repository that has been registered by running Register-PSRepository.</description>
        </option>
        <option name='Version'>
          <description>Specifies the exact version of the module to install.</description>
        </option>
        <option name='SkipPublisherCheck' required='true' value='false'>
          <description>Skip checking the module digital signature.</description>
        </option>
      </options>
    </context>
    <description>Installs or updates a PowerShell module from the specified repository.</description>
    <dispatch>
      <excludePrecedence>true</excludePrecedence>
      <keepgoing>true</keepgoing>
      <rankOrder>ascending</rankOrder>
      <successOnEmptyNodeFilter>true</successOnEmptyNodeFilter>
      <threadcount>32</threadcount>
    </dispatch>
    <executionEnabled>true</executionEnabled>
    <group>PowerShell</group>
    <id>f041d74f-6295-4207-9956-9a7f6598f95e</id>
    <loglevel>INFO</loglevel>
    <name>Update Module</name>
    <nodeFilterEditable>false</nodeFilterEditable>
    <nodefilters>
      <filter>nonodes</filter>
    </nodefilters>
    <nodesSelectedByDefault>false</nodesSelectedByDefault>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <description>PS Script</description>
        <fileExtension>ps1</fileExtension>
        <script><![CDATA[#requires -version 3
#requires -modules PowershellGet
<#
.SYNOPSIS
  Rundeck inline PowerShell script.
.DESCRIPTION
  Inline scripts are used for simple procedures, typical 25-100 lines in length.
  Job options needs to be added to the PowerShell param block, ie. @option.Parameter1@. Warning, tokens are case sensitive.
  The @ character must be escaped using \@.

  Default error action is stop, and the error code is returned to Rundeck.
.NOTES
  Version:  3.0
  Author:   Espen Blikstad
  Purpose/change:
  03.08.2018 EXTEBL: Added support for WMF package management preview
  03.08.2018 EXTEBL: Version 3.0.
#>
Param(
    # Add all tokens to the parameter block
    $Condition = ([string]{r@option.Condition@}).Remove(0,1),
    $Name = ([string]{r@option.Name@}).Remove(0,1),
    $Repository = ([string]{r@option.Repository@}).Remove(0,1),
    $Version = ([string]{r@option.Version@}).Remove(0,1),
    $SkipPublisherCheck = ([string]{r@option.SkipPublisherCheck@}).Remove(0,1)
)
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"
$host.UI.RawUI.BufferSize = new-object System.Management.Automation.Host.Size(512,50)

# Check script conditions, PowerShell expressions & WMI queries
$Condition.Split(";") | ?{$_.Trim() -ne  ""} | %{
   if($_ -like "select *"){
      if(-not(gwmi -query $_)) {exit}
   }
   else{
      if(-not(invoke-command -ScriptBlock ([Scriptblock]::Create($_)))) {exit}
   }
}

$params = @{}
if($Version){
    $params.RequiredVersion = $Version
}

if($SkipPublisherCheck -like "true"){
    $params.SkipPublisherCheck = $true
}

# Check if module is already installed from repository.
$module = Get-Module -listavailable $Name -EA 0 | sort Version -Descending | Select -First 1

# We cannot upgrade modules which does not have a repository
If($module | ? RepositorySourceLocation -ne $null){
    if($Version -like "" -or [version]$Version -gt $module.Version){
        Update-Module -Name $Name -Force @params | Out-Null
        Write-Output "Updated the PowerShell module $Name."
    }
}
Else{
    # The WMF package management preview does not support the AllowClobber parameter
    if((Get-Command install-module).Parameters."AllowClobber"){
        $params.AllowClobber = $true
    }
   Install-Module -Name $Name -Repository $Repository -Force @params | Out-Null
   Write-Output "Installed the PowerShell module $Name."
}
]]></script>
        <scriptargs />
        <scriptinterpreter>powershell.exe -inputformat none -noninteractive -nologo -command</scriptinterpreter>
      </command>
    </sequence>
    <timeout>1h</timeout>
    <uuid>f041d74f-6295-4207-9956-9a7f6598f95e</uuid>
  </job>
</joblist>
